// components/forms/ProjectForm.tsx
"use client";
import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/Button";
import { Project, ProjectFormData } from "@/lib/types";
import {
  Save,
  X,
  User,
  MapPin,
  Phone,
  Mail,
  Building,
  Check,
  Sparkles,
} from "lucide-react";

interface SimplifiedProjectFormData {
  clientName: string;
  projectAddress: string;
  clientAddress: string;
  phoneNumber: string;
  email: string;
  projectType: string;
  sameAsProject: boolean;
}

interface ProjectFormProps {
  onSubmit: (data: ProjectFormData) => Promise<void>;
  onCancel: () => void;
  initialData?: Project;
  isLoading?: boolean;
}

export default function ProjectForm({
  onSubmit,
  onCancel,
  initialData,
  isLoading = false,
}: ProjectFormProps) {
  const [formData, setFormData] = useState<SimplifiedProjectFormData>({
    clientName: initialData?.clientName || "",
    projectAddress: initialData?.projectAddress || "",
    clientAddress: initialData?.clientAddress || "",
    phoneNumber: initialData?.phoneNumber || "",
    email: initialData?.email || "",
    projectType: initialData?.projectType || "Residential",
    sameAsProject: false,
  });

  const [autoGeneratedProjectName, setAutoGeneratedProjectName] = useState("");
  const [projectName, setProjectName] = useState(initialData?.name || "");

  // Auto-generate project name when client name changes
  useEffect(() => {
    if (formData.clientName.trim()) {
      const generated = `${formData.clientName.trim()} Project`;
      setAutoGeneratedProjectName(generated);

      // Only auto-set if user hasn't manually edited the project name
      if (!projectName || projectName === autoGeneratedProjectName) {
        setProjectName(generated);
      }
    } else {
      setAutoGeneratedProjectName("");
      if (projectName === autoGeneratedProjectName) {
        setProjectName("");
      }
    }
  }, [formData.clientName]);

  // Handle same as project address checkbox
  useEffect(() => {
    if (formData.sameAsProject && formData.projectAddress) {
      setFormData((prev) => ({
        ...prev,
        clientAddress: formData.projectAddress,
      }));
    }
  }, [formData.sameAsProject, formData.projectAddress]);

  const handleInputChange = (
    field: keyof SimplifiedProjectFormData,
    value: any
  ) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleSameAsProjectChange = (checked: boolean) => {
    setFormData((prev) => ({
      ...prev,
      sameAsProject: checked,
      clientAddress: checked ? formData.projectAddress : "",
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Transform simplified form data to full ProjectFormData
    const fullProjectData: ProjectFormData = {
      name: projectName.trim(),
      clientName: formData.clientName.trim(),
      clientAddress: formData.clientAddress.trim(),
      projectAddress: formData.projectAddress.trim(),
      phoneNumber: formData.phoneNumber.trim(),
      email: formData.email.trim(),
      projectType: formData.projectType,
      // Set reasonable defaults for fields not in the simplified form
      agreementDate: new Date().toISOString().split("T")[0], // Today's date
      numberOfFloors: 1,
      projectDuration: 6,
      estimatedBudget: 0,
      status: "New",
    };

    await onSubmit(fullProjectData);
  };

  const projectTypes = [
    "Residential",
    "Commercial",
    "Industrial",
    "Institutional",
    "Interior Fit-out",
    "Other"
  ];

  return (
    <div className=" py-8 px-4 h-full overflow-y-auto">
      <div className="bg-white rounded-2xl border border-gray-200/60 shadow-xl shadow-blue-100/50 backdrop-blur-sm ">
        <form
          onSubmit={handleSubmit}
          className="p-8 space-y-8 overflow-y-auto h-full"
        >
          {/* Client Name - Enhanced Important Field */}
          <div className="group">
            <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
              <div className="p-2 bg-blue-100 rounded-lg mr-3 group-focus-within:bg-blue-200 transition-colors">
                <User className="h-4 w-4 text-blue-600" />
              </div>
              Client Full Name *
            </label>
            <input
              type="text"
              value={formData.clientName}
              onChange={(e) => handleInputChange("clientName", e.target.value)}
              className="w-full px-5 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-200 text-gray-900 placeholder-gray-400 bg-gray-50/50 hover:bg-white"
              placeholder="Enter client's full name"
              required
              autoFocus
            />
          </div>

          {/* Enhanced Auto-generated Project Name */}
          <div className="group">
            <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
              <div className="p-2 bg-emerald-100 rounded-lg mr-3 group-focus-within:bg-emerald-200 transition-colors">
                <Building className="h-4 w-4 text-emerald-600" />
              </div>
              Project Name
            </label>
            <input
              type="text"
              value={projectName}
              onChange={(e) => setProjectName(e.target.value)}
              className="w-full px-5 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-4 focus:ring-emerald-500/20 focus:border-emerald-500 transition-all duration-200 text-gray-900 placeholder-gray-400 bg-gray-50/50 hover:bg-white"
              placeholder="Project name will auto-generate"
            />
            {autoGeneratedProjectName &&
              projectName !== autoGeneratedProjectName && (
                <button
                  type="button"
                  onClick={() => setProjectName(autoGeneratedProjectName)}
                  className="inline-flex items-center text-sm text-blue-600 hover:text-blue-700 mt-2 px-3 py-1 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors duration-200"
                >
                  <Sparkles className="h-3 w-3 mr-1" />
                  Use suggested: "{autoGeneratedProjectName}"
                </button>
              )}
          </div>

          {/* Enhanced Project Address */}
          <div className="group">
            <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
              <div className="p-2 bg-orange-100 rounded-lg mr-3 group-focus-within:bg-orange-200 transition-colors">
                <MapPin className="h-4 w-4 text-orange-600" />
              </div>
              Project Address *
            </label>
            <textarea
              value={formData.projectAddress}
              onChange={(e) =>
                handleInputChange("projectAddress", e.target.value)
              }
              className="w-full px-5 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-4 focus:ring-orange-500/20 focus:border-orange-500 transition-all duration-200 text-gray-900 placeholder-gray-400 bg-gray-50/50 hover:bg-white resize-none"
              placeholder="Enter the project site address"
              rows={3}
              required
            />
          </div>

          {/* Enhanced Client Address with Improved Checkbox */}
          <div className="group">
            <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
              <div className="p-2 bg-purple-100 rounded-lg mr-3 group-focus-within:bg-purple-200 transition-colors">
                <MapPin className="h-4 w-4 text-purple-600" />
              </div>
              Client Address *
            </label>

            {/* Enhanced Same as Project Checkbox */}
            <div className="mb-4">
              <label className="flex items-center cursor-pointer group/checkbox p-3 rounded-xl hover:bg-gray-50 transition-colors duration-200">
                <input
                  type="checkbox"
                  checked={formData.sameAsProject}
                  onChange={(e) => handleSameAsProjectChange(e.target.checked)}
                  className="sr-only"
                />
                <div
                  className={`w-6 h-6 border-2 rounded-lg flex items-center justify-center mr-3 transition-all duration-200 ${
                    formData.sameAsProject
                      ? "bg-gradient-to-br from-blue-500 to-blue-600 border-blue-500 shadow-lg shadow-blue-500/25"
                      : "border-gray-300 hover:border-gray-400 group-hover/checkbox:border-blue-300"
                  }`}
                >
                  {formData.sameAsProject && (
                    <Check className="h-4 w-4 text-white" />
                  )}
                </div>
                <span className="text-sm font-medium text-gray-700 group-hover/checkbox:text-gray-900">
                  Same as project address
                </span>
              </label>
            </div>

            <textarea
              value={formData.clientAddress}
              onChange={(e) =>
                handleInputChange("clientAddress", e.target.value)
              }
              className={`w-full px-5 py-4 border-2 rounded-xl focus:outline-none transition-all duration-200 text-gray-900 placeholder-gray-400 resize-none ${
                formData.sameAsProject
                  ? "border-gray-200 bg-gray-100 cursor-not-allowed opacity-60"
                  : "border-gray-200 focus:ring-4 focus:ring-purple-500/20 focus:border-purple-500 bg-gray-50/50 hover:bg-white"
              }`}
              placeholder="Enter client's address"
              rows={3}
              required
              disabled={formData.sameAsProject}
            />
          </div>

          {/* Enhanced Contact Information Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="group">
              <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
                <div className="p-2 bg-green-100 rounded-lg mr-3 group-focus-within:bg-green-200 transition-colors">
                  <Phone className="h-4 w-4 text-green-600" />
                </div>
                Phone Number *
              </label>
              <input
                type="tel"
                value={formData.phoneNumber}
                onChange={(e) =>
                  handleInputChange("phoneNumber", e.target.value)
                }
                className="w-full px-5 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-4 focus:ring-green-500/20 focus:border-green-500 transition-all duration-200 text-gray-900 placeholder-gray-400 bg-gray-50/50 hover:bg-white"
                placeholder="Enter phone number"
                required
              />
            </div>

            <div className="group">
              <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
                <div className="p-2 bg-pink-100 rounded-lg mr-3 group-focus-within:bg-pink-200 transition-colors">
                  <Mail className="h-4 w-4 text-pink-600" />
                </div>
                Email{" "}
                <span className="text-gray-500 font-normal">(Optional)</span>
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => handleInputChange("email", e.target.value)}
                className="w-full px-5 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-4 focus:ring-pink-500/20 focus:border-pink-500 transition-all duration-200 text-gray-900 placeholder-gray-400 bg-gray-50/50 hover:bg-white"
                placeholder="Enter email address"
              />
            </div>
          </div>

          {/* Enhanced Project Type */}
          <div className="group">
            <label className="flex items-center text-sm font-semibold text-gray-800 mb-3">
              <div className="p-2 bg-indigo-100 rounded-lg mr-3 group-focus-within:bg-indigo-200 transition-colors">
                <Building className="h-4 w-4 text-indigo-600" />
              </div>
              Project Type{" "}
              <span className="text-gray-500 font-normal">(Optional)</span>
            </label>
            <select
              value={formData.projectType}
              onChange={(e) => handleInputChange("projectType", e.target.value)}
              className="w-full px-5 py-4 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-4 focus:ring-indigo-500/20 focus:border-indigo-500 transition-all duration-200 text-gray-900 bg-gray-50/50 hover:bg-white cursor-pointer"
            >
              {projectTypes.map((type) => (
                <option key={type} value={type}>
                  {type}
                </option>
              ))}
            </select>
            <p className="text-xs text-gray-500 mt-2 px-1">
              You can always change this later when creating estimates
            </p>
          </div>

          {/* Enhanced Form Actions */}
          <div className="flex justify-end space-x-4 pt-6 border-t border-gray-100">
            <Button
              type="button"
              variant="outline"
              onClick={onCancel}
              disabled={isLoading}
              className="px-8 py-3 border-2 border-gray-300 hover:border-gray-400 hover:bg-gray-50 rounded-xl font-medium transition-all duration-200"
            >
              <X className="h-4 w-4 mr-2" />
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={isLoading}
              className="px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl font-semibold shadow-lg shadow-blue-500/25 hover:shadow-blue-500/40 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-white/30 border-t-white mr-2" />
              ) : (
                <Save className="h-4 w-4 mr-2" />
              )}
              {initialData ? "Update Project" : "Create Project"}
            </Button>
          </div>
        </form>
      </div>

      {/* Enhanced Footer with Better Styling */}
      <div className="mt-6 text-center">
        <div className="inline-flex items-center px-4 py-2 bg-white/60 backdrop-blur-sm rounded-full border border-gray-200/60">
          <div className="w-2 h-2 bg-blue-500 rounded-full mr-3 animate-pulse"></div>
          <p className="text-sm text-gray-600 font-medium">
            Details like budget, timeline, and agreements can be added later
            when creating estimates
          </p>
        </div>
      </div>
    </div>
  );
}
